/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { BuzzshotApi } from "@fern-api/buzzshot";
import urlJoin from "url-join";
import * as core from "./core";
import * as serializers from "./serialization";
import * as errors from "./errors";

export declare namespace BuzzshotApiClient {
    interface Options {
        environment: string;
    }
}

export class BuzzshotApiClient {
    constructor(private readonly options: BuzzshotApiClient.Options) {}

    /**
     *
     */
    public async listAccounts(request: BuzzshotApi.ListAccountsRequest = {}): Promise<BuzzshotApi.Account> {
        const { page } = request;
        const _queryParams = new URLSearchParams();
        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/api/v2/accounts"),
            method: "GET",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.Account.parseOrThrow(_response.body as serializers.Account.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuzzshotApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuzzshotApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuzzshotApiTimeoutError();
            case "unknown":
                throw new errors.BuzzshotApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     */
    public async retrieveAccount(id: string): Promise<BuzzshotApi.Room> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/api/v2/accounts/${id}`),
            method: "GET",
        });
        if (_response.ok) {
            return await serializers.Room.parseOrThrow(_response.body as serializers.Room.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuzzshotApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuzzshotApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuzzshotApiTimeoutError();
            case "unknown":
                throw new errors.BuzzshotApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     */
    public async listGames(request: BuzzshotApi.ListGamesRequest = {}): Promise<BuzzshotApi.GamesResponse> {
        const { page, complete, date, before, after } = request;
        const _queryParams = new URLSearchParams();
        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        if (complete != null) {
            _queryParams.append("complete", complete);
        }

        if (date != null) {
            _queryParams.append("date", date);
        }

        if (before != null) {
            _queryParams.append("before", before);
        }

        if (after != null) {
            _queryParams.append("after", after);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/api/v2/games"),
            method: "GET",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.GamesResponse.parseOrThrow(_response.body as serializers.GamesResponse.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuzzshotApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuzzshotApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuzzshotApiTimeoutError();
            case "unknown":
                throw new errors.BuzzshotApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     */
    public async retrieveGame(id: string, request: BuzzshotApi.RetrieveGameRequest = {}): Promise<BuzzshotApi.Game> {
        const { complete, date, before, after } = request;
        const _queryParams = new URLSearchParams();
        if (complete != null) {
            _queryParams.append("complete", complete);
        }

        if (date != null) {
            _queryParams.append("date", date);
        }

        if (before != null) {
            _queryParams.append("before", before);
        }

        if (after != null) {
            _queryParams.append("after", after);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/api/v2/games/${id}`),
            method: "GET",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.Game.parseOrThrow(_response.body as serializers.Game.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuzzshotApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuzzshotApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuzzshotApiTimeoutError();
            case "unknown":
                throw new errors.BuzzshotApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     */
    public async listGroups(request: BuzzshotApi.ListGroupsRequest = {}): Promise<BuzzshotApi.GroupsResponse> {
        const { page, isEvent, complete } = request;
        const _queryParams = new URLSearchParams();
        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        if (isEvent != null) {
            _queryParams.append("is_event", isEvent);
        }

        if (complete != null) {
            _queryParams.append("complete", complete);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/api/v2/groups"),
            method: "GET",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.GroupsResponse.parseOrThrow(_response.body as serializers.GroupsResponse.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuzzshotApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuzzshotApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuzzshotApiTimeoutError();
            case "unknown":
                throw new errors.BuzzshotApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     */
    public async retrieveGroup(id: string, request: BuzzshotApi.RetrieveGroupRequest = {}): Promise<BuzzshotApi.Group> {
        const { isEvent, complete } = request;
        const _queryParams = new URLSearchParams();
        if (isEvent != null) {
            _queryParams.append("is_event", isEvent);
        }

        if (complete != null) {
            _queryParams.append("complete", complete);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/api/v2/groups/${id}`),
            method: "GET",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.Group.parseOrThrow(_response.body as serializers.Group.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuzzshotApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuzzshotApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuzzshotApiTimeoutError();
            case "unknown":
                throw new errors.BuzzshotApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     */
    public async listPlayers(request: BuzzshotApi.ListPlayersRequest = {}): Promise<BuzzshotApi.PlayersResponse> {
        const { page } = request;
        const _queryParams = new URLSearchParams();
        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/api/v2/players"),
            method: "GET",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.PlayersResponse.parseOrThrow(_response.body as serializers.PlayersResponse.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuzzshotApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuzzshotApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuzzshotApiTimeoutError();
            case "unknown":
                throw new errors.BuzzshotApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     */
    public async retrievePlayer(id: string): Promise<BuzzshotApi.Player> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/api/v2/players/${id}`),
            method: "GET",
        });
        if (_response.ok) {
            return await serializers.Player.parseOrThrow(_response.body as serializers.Player.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuzzshotApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuzzshotApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuzzshotApiTimeoutError();
            case "unknown":
                throw new errors.BuzzshotApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     */
    public async listLocations(request: BuzzshotApi.ListLocationsRequest = {}): Promise<BuzzshotApi.LocationsResponse> {
        const { page } = request;
        const _queryParams = new URLSearchParams();
        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/api/v2/rooms"),
            method: "GET",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.LocationsResponse.parseOrThrow(
                _response.body as serializers.LocationsResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuzzshotApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuzzshotApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuzzshotApiTimeoutError();
            case "unknown":
                throw new errors.BuzzshotApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     */
    public async retrieveLocation(id: string): Promise<BuzzshotApi.Room> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/api/v2/rooms/${id}`),
            method: "GET",
        });
        if (_response.ok) {
            return await serializers.Room.parseOrThrow(_response.body as serializers.Room.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuzzshotApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuzzshotApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuzzshotApiTimeoutError();
            case "unknown":
                throw new errors.BuzzshotApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     */
    public async listPhotos(request: BuzzshotApi.ListPhotosRequest = {}): Promise<BuzzshotApi.PhotosResponse> {
        const { page } = request;
        const _queryParams = new URLSearchParams();
        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/api/v2/photos"),
            method: "GET",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.PhotosResponse.parseOrThrow(_response.body as serializers.PhotosResponse.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuzzshotApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuzzshotApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuzzshotApiTimeoutError();
            case "unknown":
                throw new errors.BuzzshotApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     *
     */
    public async retrievePhoto(photoId: string): Promise<BuzzshotApi.Photo> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/api/v2/photos/${photoId}`),
            method: "GET",
        });
        if (_response.ok) {
            return await serializers.Photo.parseOrThrow(_response.body as serializers.Photo.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuzzshotApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuzzshotApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuzzshotApiTimeoutError();
            case "unknown":
                throw new errors.BuzzshotApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
